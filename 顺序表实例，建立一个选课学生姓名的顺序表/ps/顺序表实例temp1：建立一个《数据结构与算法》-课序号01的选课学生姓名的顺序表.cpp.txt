//一个顺序表实例：建立自动化专业《数据结构与算法》-课序号01或02的选课学生姓名的顺序表；


/*请大家先阅读下面几条：

1.我写的这段代码，同学们先阅读，看后自己试着写，也可以边看边敲代码，但千万不要复制粘贴！不要复制粘贴！
  每个字母都自己敲(看着这个文本敲都行)！！！特别是对C不熟的同学，这条很重要，很重要！！是快速入门的窍门！

3.教材中的知识点比较零散，写这段代码时为了让同学们大脑中快速建立本课程的初步总体学习框架，在框架指导下学习，
  而不是只会看细节，却不知道怎么用这些知识点，感觉很茫然；

4.目前我已写了顺序表抽象数据类型定义的这些基本操作：初始化，创建选课学生名单；
5.以后还需要你们通过做实验，增加新的基本操作：插入、删除、查找、取值等
6.目前，每个数据元素（结点）只有一个数据项（学生姓名），以后我们要增加数据项（学号，性别，班级等信息），如何修改？请思考

7.请注意：主函数我写得特别简约，把部分可以在主函数实现的功能，放在了基本操作函数里，目的是突出主线框架，方便对C遗忘了的同学阅读,
  以后我们会在主函数实现部分辅助功能，逐步把主函数丰富完善，把基本操作函数写得简约一些；

8.我已注释得非常详细，如果有同学因C语言生疏了，确实看不懂，没关系，还是要先动动手，建立点感性认识也好，
  第二章我们要详细讲这部分内容，还要做实验，届时都能懂会写的，但不能等到那个时候再看再写，现在就要动手；

9.最后，也是最重要的，请阅读第1条
*/


#include<iostream>
#include<string>        //用于定义字符串类型变量
#include<iomanip>       //用于控制输出格式，目前暂时还用不到
using namespace std;

/*******以下是宏定义***************************/

#define OK 1         //函数结果状态码,表示函数功能执行成功
#define ERROR 0      //函数结果状态码,表示函数功能执行失败
					 //如果用bool型变量(取值:ture,false)，可以不用宏定义OK和ERROR,这里我们与教材保持一致，不采用

#define OVERFLOW -1  //函数结果状态码,表示函数执行时溢出
					//（注意VS对OVERFLOW已经做了宏定义,这里是重定义，加这条是为了与教材保持一致）

#define ElemType string //数据元素类型（根据实际需要确定，此例为自动化21级同学的名字，故为string型）
					  /*注意：ElemType不仅可以是基本数据类型，还可以是自定义的结构体这样的复合数据类型，内含多个数据项，我们
以后再举例*/

#define MAXSIZE  100  //顺序表的最大长度（应根据实际需要确定此值，比如这门课的教室最大容量）
/*这里为了与我们上课的教材一致，设置为100个结点空间*/
#define Status int   //Status是函数返回值类型，其值是函数结果状态代码(可根据实际需要选择Status代表的数据类型，此例为int型)

/*******************************************************/
//typedef int Status; //Status是函数返回值类型，其值是函数结果状态代码(可根据实际需要选择Status代表的数据类型，此例为int型)

/********定义（设计）数据存储结构类型********************/

typedef struct SqList //用typedef（类型定义）描述结点的数据存储结构(是一个结构体，名字自定，这里将它取名为SqList,即顺序表的英文缩写)
{
	ElemType *e;     //定义e为ElemType型数据元素存储地址指针，e保存的是元素的地址，e前面加*：*e是该指针指向的元素的内容（即学生姓名）
	int length;      //顺序表中的实际结点数量（即实际选课学生数量，0 =< length =< MAXSIZE ）

}SqList;   //以后可以用SqList作为此自定义类型的类型名,用来定义变量，如将x定义为SqList类型：Sqlist x; x就成为此结构体类型的变量



/******以下是主函数（利用下面抽象数据类型定义的各种操作函数，实现数据管理）***********************************************/
/*****如果还想具有某些管理功能，但发现实现不了，就在抽象数据类型中增加定义新的基本操作，并以函数实现，放在后面************/
/*****也就是说，基本操作有哪些，并不是固定的，因根据用户实际需求，在设计时确定********************************************/

int main() {

	Status InitList(SqList &L);   //函数声明，基本操作1：初始化（构造一个空的线性表L）
	Status CreateList(SqList &L); //函数声明，基本操作2：创建（把学生名单输入线性表L）

	SqList L;       //定义一个变量L，L为SqList类型（即L是一个SqList型结构体变量，内部有两个基本型变量成员：e和length）
					//注意：只能对其成员赋值，如：L.length=0；不能直接对结构体L赋值：L=0（错！结构体内有两种基本类型，是复合型，0仅仅是整型

		InitList(L);  // 构造一个空的线性表L（初始化线性表）

	CreateList(L);  //把学生名单输入此线性表L（创建线性表）


	return 0;
}


/************以下是供主函数调用的基本操作函数(实现线性表抽象数据类型定义的各种基本操作)***********************/
/*************************************************************************************************************/

//基本操作1：初始化（构造一个空的线性表）
Status InitList(SqList &L)  //自定义的函数，实现抽象数据类型中定义的操作：初始化。可参考教材P21
{  // 构造一个空的线性表L，L在主函数中定义， "&"的意思是这里是引用，函数内部改变L的值，返回主函数后，在主函数里其改变仍然有效           
   //L前面如果不加&，此函数内部改变L，跳出此函数后就会无效，有同学都毕业了还搞不清楚这点，要概念清晰，切记。

	L.e = new ElemType[MAXSIZE]; //为顺序表分配一个大小为MAXSIZE（此例是100）的数组空间,并把起始地址赋给表L的成员e(e是指针型变量，其值是地址)
	if (!L.e) return ERROR;     //分配失败（比如内存空间不足），返回结果状态码ERROR,即Status=ERROR(即Status=0)
	L.length = 0;              //分配成功，目前还没有创建学生数据，学生数量初始化为0
	return OK;                 //返回分配成功状态码，即Status=OK(即Status=1)
}

/***********************************************************************************************************/

//基本操作2：创建（把学生名单输入此线性表）
Status CreateList(SqList &L)  //把学生名单输入此线性表L
{  // L是在主函数中定义的，这里是引用，当然要加&,否则返回主函数后，此函数内输入的学生名单就消失了

	string student_name;  //定义存放输入学生姓名的变量
	cout << "请通过键盘输入学生姓名(以空格间隔，回车结束, 0退出):";
	cin >> student_name; //键盘输入的学生姓名存放到student_name


	int i = 0; //定义计数器i，记录学生姓名存储位置，初始化为0（起始位置，第1个学生姓名存放在“位置0”,第i个学生姓名存放在位置"i-1"，切记）
	while (student_name != "0")
	{//输入字符"0"，表示选课学生姓名输入完毕，当然你也可以设其他符号，但应避免人名     

		if (L.length == MAXSIZE) { cout << "\n出错，超出课程教室容量"; return ERROR; }//“return ERROR;”可改为“exit(OVERFLOW);”

		L.e[i++] = student_name;  //将学生姓名放入表L中的结点i的数据域*e（e是指针，其实是放入了位于位置i的结构体L成员e指向的空间*e）
		L.length++;              //顺序表长度加1（即实际选课学生数量加1）

		if (cin.get() == '\n') cout << "请继续键盘输入的学生姓名:"; //"回车"后继续提醒输入学生姓名

		cin >> student_name; //可继续键盘输入的学生姓名
	}

	cout << "创建学生选课名单成功！选课学生共:" << i << "名:\n\n";
	for (i = 0; i < L.length; i++)
		cout << L.e[i] << "\n";

	return OK; //返回成功状态码，即Status=OK(即Status=1)
}
/**************下面为此顺序表尚未实现的基本操作****************************************************/
/************************************************************************************************

//基本操作3：取值（ 根据给定的序号，获取该序号的学生姓名）
Status GetElem(SqList &L, int i, ElemType &e)
{//这段同学们在实验中写，并相应修改主函数,在某种情况下调用此函数


}

************************************************************************************************
//基本操作4：查找（ 根据给定学生姓名，查找该名学生是否在表中，并返回查找结果）
SqList* LocateElem(SqList L,  ElemType e)
{//这段同学们在实验中写，并相应修改主函数,在某种情况下调用此函数
 //此函数中的形参ElemType e，上面的函数形参ElemType &e，有细微差别，思考一下：为什么？ 我们上课要讲


}

************************************************************************************************
//基本操作5：插入（ 有新增学生姓名，插入选课学生表中，并指定插入位置）
Status ListInsert(SqList &L, int i, ElemType &e)
{//这段同学们在实验中写，并相应修改主函数,在某种情况下调用此函数


}

************************************************************************************************
//基本操作6：删除（ 有学生退选，在选课学生表中将该生名单删除）
Status ListDelete(SqList &L, int i)
{//这段同学们在实验中写，并相应修改主函数,在某种情况下调用此函数



}
*****************************/